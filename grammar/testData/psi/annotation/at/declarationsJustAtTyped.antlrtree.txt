File: declarationsJustAtTyped.kt - 6e4c22c0bc05136b86090016a702aeeb
  packageHeader
  importList
  topLevelObject
    declaration
  topLevelObject
    declaration
      PRIVATE("private")
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          annotation
            multiAnnotation
              AT("@")
              LSQUARE("[")
              unescapedAnnotation
                constructorInvocation
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Ann1")
                  valueArguments
                    LPAREN("(")
                    valueArgument
                      expression
                        disjunction
                          conjunction
                            equality
                              comparison
                                infixOperation
                                  elvisExpression
                                    infixFunctionCall
                                      rangeExpression
                                        additiveExpression
                                          multiplicativeExpression
                                            asExpression
                                              prefixUnaryExpression
                                                postfixUnaryExpression
                                                  primaryExpression
                                                    literalConstant
                                                      IntegerLiteral("1")
                    RPAREN(")")
              RSQUARE("]")
          annotation
            singleAnnotation
              AT("@")
              unescapedAnnotation
                constructorInvocation
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Ann3")
                  valueArguments
                    LPAREN("(")
                    valueArgument
                      expression
                        disjunction
                          conjunction
                            equality
                              comparison
                                infixOperation
                                  elvisExpression
                                    infixFunctionCall
                                      rangeExpression
                                        additiveExpression
                                          multiplicativeExpression
                                            asExpression
                                              prefixUnaryExpression
                                                postfixUnaryExpression
                                                  primaryExpression
                                                    stringLiteral
                                                      lineStringLiteral
                                                        QUOTE_OPEN(""")
                                                        lineStringContent
                                                          LineStrText("2")
                                                        QUOTE_CLOSE(""")
                    RPAREN(")")
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              modifiers
                annotation
                  singleAnnotation
                    AT("@")
                    unescapedAnnotation
                      userType
                        simpleUserType
                          simpleIdentifier
                            PRIVATE("private")
              VAL("val")
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            COMMA(",")
            classParameter
              modifiers
                annotation
                  singleAnnotation
                    AT("@")
                    unescapedAnnotation
                      userType
                        simpleUserType
                          simpleIdentifier
                            PRIVATE("private")
              VAR("var")
              simpleIdentifier
                Identifier("y")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            COMMA(",")
            classParameter
              modifiers
                annotation
                  singleAnnotation
                    AT("@")
                    unescapedAnnotation
                      userType
                        simpleUserType
                          simpleIdentifier
                            OPEN("open")
              simpleIdentifier
                Identifier("z")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("LocalClass")
    semis
      NL("\n")
      NL("\n")
  Identifier("print")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          annotation
            multiAnnotation
              AT("@")
              LSQUARE("[")
              unescapedAnnotation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("inline2")
              RSQUARE("]")
          modifier
            visibilityModifier
              PRIVATE("private")
            NL("\n")
        FUN("fun")
        simpleIdentifier
          Identifier("inlineLocal")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
      LSQUARE("[")
      Identifier("Ann")
      RSQUARE("]")
    semis
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      PRIVATE("private")
    semis
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        modifiers
          annotation
            singleAnnotation
              AT("@")
              unescapedAnnotation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Volatile")
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("1")
    semis
      NL("\n")
      NL("\n")
  Identifier("foo")
  LPAREN("(")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        receiverType
          LPAREN("(")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      AT("@")
      Identifier("ann")
      LPAREN("(")
      IntegerLiteral("1")
      RPAREN(")")
      Identifier("x")
      COLON(":")
      Identifier("Int")
      RPAREN(")")
      LCURL("{")
      RCURL("}")
      RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  FOR("for")
  LPAREN("(")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
      Identifier("x")
      IN("in")
      IntegerLiteral("1")
      RANGE("..")
      IntegerLiteral("100")
      RPAREN(")")
      LCURL("{")
      RCURL("}")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
    semis
      NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      PRIVATE("private")
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      OPEN("open")
      GET("get")
      LPAREN("(")
      RPAREN(")")
      ASSIGNMENT("=")
      IntegerLiteral("1")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
